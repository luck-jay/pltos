
src := $(obj)

PHONY := __build

obj-y :=
targets :=
subdir-y :=
asflags-y  :=
ccflags-y  :=
cppflags-y :=
ldflags-y  :=

subdir-asflags-y :=
subdir-ccflags-y :=

include scripts/Build.include
-include include/config/auto.conf

build-dir := $(src)
build-file := $(build-dir)/Makefile
include $(build-file)

include scripts/Makefile.lib

ifneq ($(strip $(obj-y) $(obj-)),)
    builtin-target := $(obj)/built-in.o
endif

__build: $(builtin-target) $(subdir-ym)

define rule_cc_o_c
	$(echo-cmd) $(cmd_$(1)); \
	printf '%s\n' 'cmd_$@ := $(make-cmd)' > $(dot-target).cmd; \
	rm -f $(depfile);
endef

define rule_as_o_S
	$(echo-cmd) $(cmd_$(1)); \
	printf '%s\n' 'cmd_$@ := $(make-cmd)' > $(dot-target).cmd; \
	rm -f $(depfile);
endef

quiet_cmd_link_o_target = LD    $@
cmd_link_o_target = $(if $(strip $(obj-y)),\
		      $(LD) $(ld_flags) -r -o $@ $(filter $(obj-y), $^), \
		      rm -f $@)


quiet_cmd_cc_o_c = CC    $@
cmd_cc_o_c = $(CC) $(c_flags) -c -o $@ $<

$(obj)/%.o: $(src)/%.c FORCE
	$(call if_changed_rule,cc_o_c)

quiet_cmd_as_o_S = AS    $@
cmd_as_o_S = $(AS) $(as_flags) -c -o $@ $<

$(obj)/%.o: $(src)/%.S FORCE
	$(call if_changed_rule,as_o_S)

targets += $(real-objs-y)

$(builtin-target): $(obj-y) FORCE
	$(call if_changed,link_o_target)

targets += $(builtin-target)

$(sort $(subdir-obj-y)): $(subdir-ym) ;

PHONY += $(subdir-ym)
$(subdir-ym):
	$(Q)$(MAKE) $(build)=$@

targets := $(wildcard $(sort $(targets)))
cmd_files := $(wildcard $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))

ifneq ($(cmd_files),)
  include $(cmd_files)
endif

PHONY += FORCE

FORCE:

.PHONY: $(PHONY)
